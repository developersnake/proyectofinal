plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'jacoco'
	id "org.sonarqube" version "4.2.1.3168"
}

group = 'com.exacom'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
	implementation 'io.jsonwebtoken:jjwt:0.12.3'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy('jacocoTestReport')
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
		csv.required = false
		xml.outputLocation = layout.buildDirectory.file("reports/jacoco/jacoco.xml")
		html.outputLocation = layout.buildDirectory.dir("reports/html")
	}
}

sonar {
	properties {
		property 'sonar.sourceEncoding', 'UTF-8'
		property 'sonar.exclusions', '**/*Applicatiom.java'
		property 'sonar.junit.reportsPaths', "${buildDir}/reports/tests"
		property 'sonar.coverage.jacoco.xmlReportPaths', "${buildDir}/reports/jacoco/jacoco.xml"

		property 'sonar.host.url', 'http://localhost:8000'
		property 'sonar.token', 'sqp_cc9c8dcf63b450603c3a31abb54dc5653a77a809'
		property 'sonar.projectKey', 'proyectofinal'
	}
}
